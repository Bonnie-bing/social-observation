ln(1)-ln(0)
log(1)-log(0)
Sys.getenv("BINPREF")
version
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
${RTOOLS40_HOME}
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
#rm(list=ls())
require("knitr")
opts_chunk$set(tidy = FALSE, warning = FALSE, message = FALSE, cache = FALSE)
#load libraries and functions
suppressMessages(library("tidyverse")) # to organize data
suppressMessages(library('rstan')) # for model fiting, using the sampling function
rstan_options(auto_write = TRUE) #which allows you to automatically save a bare version of a compiled Stan program to the hard disk so that it does not need to be recompiled (unless you change it): https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
suppressMessages(library('loo'))   # for calculating looic and waic
suppressMessages(library("data.table")) # to read data as data.table rather than data.frame.
suppressMessages(library("bayesplot")) # to plot various figures for model checking
#The following functions are adapted from the hBayesDM package.
source("./supp_funcs/func01_prepro.R") #preparing the data for the stan:                         change for each project
source("./supp_funcs/func02_get_ini.R") #get starting point using VB for simulation:             no changes needed
source("./supp_funcs/func03_get_pars.R") #setting parameters of interest for stan:               change for each project
source("./supp_funcs/func04_extract_ic.R") #extract looic and waic of the model:                 no chnage needed
source("./supp_funcs/func05_printfit.R") #print looic and waic of the model and their weights:   no change needed
source("./supp_funcs/func06_modeldata.R") #wrap all the model-related data to a list:            chage for each project
options(max.print = 99999) # for ploting all results of fitted model
load('output_m15f_vdecay_modeldata.RData')
printFit(fit_m15f_vdecay_modeldata,ic="both")
ind_pars <- fit_m15f_vdecay_modeldata$allIndPars
27*13
setwd("D:/projects/learning_allstuff/behav_data_new/comp_modeling/Final_v1")
#rm(list=ls())
require("knitr")
opts_chunk$set(tidy = FALSE, warning = FALSE, message = FALSE, cache = FALSE)
#load libraries and functions
suppressMessages(library("tidyverse")) # to organize data
suppressMessages(library('rstan')) # for model fiting, using the sampling function
rstan_options(auto_write = TRUE) #which allows you to automatically save a bare version of a compiled Stan program to the hard disk so that it does not need to be recompiled (unless you change it): https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
suppressMessages(library('loo'))   # for calculating looic and waic
suppressMessages(library("data.table")) # to read data as data.table rather than data.frame.
suppressMessages(library("bayesplot")) # to plot various figures for model checking
suppressMessages(library("R.matlab")) # to save out .mat files
suppressMessages(library("hypr")) # transfer hypothesis matrix to contrast matrix.
suppressMessages(library("ggplot2")) # for plotting.
suppressMessages(library("ggsci")) # for setting scientific jouranl color palettes
suppressMessages(library("gridExtra")) # for arranging the position of figures
suppressMessages(library("ggpubr")) # using the ggexport
source("./HDIofMCMC.R") #compute the 95% HDI: change for each project
source("./plotHDI.R") #plot the distribution and the 95% HDI: no chnage needed
#plot function, this one handles continuous variables
cplot <- function(d,xlimits,xbreaks,ylimits,ybreaks,xlabs,ylabs){
fig <- ggplot(d, aes(trial_perC2, means)) +
#geom_point(data=data.acc, aes(trial_perC.cwc, ACC, color = appearance), alpha = 0.5) + #not necessary
geom_line(aes(color = group)) +  # in the mydf, 'group' refer to real or simulated
geom_ribbon(aes(ymin = conf.low, ymax = conf.high,fill=group), alpha=0.1)+
scale_x_continuous(limits = xlimits,breaks = xbreaks,expand = c(0, 0.5))+ # no expand, i.e., really from lower limits and really ends with higher limits
scale_y_continuous(limits = ylimits,breaks = ybreaks,expand = c(0, 0.05))+ #https://stackoverflow.com/questions/13701347/force-the-origin-to-start-at-0
labs(x = xlabs, y = ylabs)+
#scale_color_lancet()+ #https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html
#scale_fill_lancet()+
scale_colour_manual(values=c('#4DBBD6','#039F87'))+
scale_fill_manual(values=c('#4DBBD6','#039F87'))+
theme_classic()+
theme(legend.position="top")+
theme(axis.ticks.length = unit(0.1, "cm"))+
theme(axis.text.x = element_text(size=20,colour='black',family =windowsFont("RMN")),axis.text.y =         element_text(size=20,colour='black',family=windowsFont("RMN")),axis.title= element_text(size=24,colour='black',family=windowsFont("RMN")))
}
#rm(list=ls())
require("knitr")
opts_chunk$set(tidy = FALSE, warning = FALSE, message = FALSE, cache = FALSE)
#load libraries and functions
suppressMessages(library("tidyverse")) # to organize data
suppressMessages(library('rstan')) # for model fiting, using the sampling function
rstan_options(auto_write = TRUE) #which allows you to automatically save a bare version of a compiled Stan program to the hard disk so that it does not need to be recompiled (unless you change it): https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
suppressMessages(library('loo'))   # for calculating looic and waic
suppressMessages(library("data.table")) # to read data as data.table rather than data.frame.
suppressMessages(library("bayesplot")) # to plot various figures for model checking
suppressMessages(library("R.matlab")) # to save out .mat files
suppressMessages(library("hypr")) # transfer hypothesis matrix to contrast matrix.
suppressMessages(library("ggplot2")) # for plotting.
suppressMessages(library("ggsci")) # for setting scientific jouranl color palettes
suppressMessages(library("gridExtra")) # for arranging the position of figures
suppressMessages(library("ggpubr")) # using the ggexport
source("./HDIofMCMC.R") #compute the 95% HDI: change for each project
source("./plotHDI.R") #plot the distribution and the 95% HDI: no chnage needed
#plot function, this one handles continuous variables
cplot <- function(d,xlimits,xbreaks,ylimits,ybreaks,xlabs,ylabs){
fig <- ggplot(d, aes(trial_perC2, means)) +
#geom_point(data=data.acc, aes(trial_perC.cwc, ACC, color = appearance), alpha = 0.5) + #not necessary
geom_line(aes(color = group)) +  # in the mydf, 'group' refer to real or simulated
geom_ribbon(aes(ymin = conf.low, ymax = conf.high,fill=group), alpha=0.1)+
scale_x_continuous(limits = xlimits,breaks = xbreaks,expand = c(0, 0.5))+ # no expand, i.e., really from lower limits and really ends with higher limits
scale_y_continuous(limits = ylimits,breaks = ybreaks,expand = c(0, 0.05))+ #https://stackoverflow.com/questions/13701347/force-the-origin-to-start-at-0
labs(x = xlabs, y = ylabs)+
#scale_color_lancet()+ #https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html
#scale_fill_lancet()+
scale_colour_manual(values=c('#4DBBD6','#039F87'))+
scale_fill_manual(values=c('#4DBBD6','#039F87'))+
theme_classic()+
theme(legend.position="top")+
theme(axis.ticks.length = unit(0.1, "cm"))+
theme(axis.text.x = element_text(size=20,colour='black',family =windowsFont("RMN")),axis.text.y =         element_text(size=20,colour='black',family=windowsFont("RMN")),axis.title= element_text(size=24,colour='black',family=windowsFont("RMN")))
}
#1. load the saved data
abs_data  <- read.csv(file="./sim/audience/sim_data_m7c2_abs_fit_all.csv")
sim_data  <- read.csv(file="./sim/audience/sim_data_m7c2_sim_fit_all.csv")
#2. compute the simulated ACC and probabilities of ACC
abs_data <- abs_data %>%
mutate(ACC_sim = ifelse((choice==choice_sim & ACC==1) | (choice!=choice_sim & ACC==0), 1, 0),#compute the simulated ACC
ACC_prob_sim = ifelse(ACC==1,choice_prob_sim,1-choice_prob_sim)) #compute the simulated ACC prob
sim_data <- sim_data %>%
mutate(ACC_sim = ifelse((choice==choice_sim & ACC==1) | (choice!=choice_sim & ACC==0), 1, 0),#compute the simulated ACC
ACC_prob_sim = ifelse(ACC==1,choice_prob_sim,1-choice_prob_sim)) #compute the simulated ACC prob
##########################################3.1 accuracy of prediction overall and for each cond################################################
#######################################abs data
acc_abs_overall <- abs_data %>%
group_by(subid) %>%
summarise(acc=mean(choice==choice_sim)) %>% ungroup()
acc_abs_cond <- abs_data %>%
group_by(subid,probab) %>%
summarise(mean(choice==choice_sim)) %>% ungroup()
names(acc_abs_cond) <- c("subid","prob",'acc')
acc_abs_cond.wide <- acc_abs_cond %>%
pivot_wider(
id_cols     = subid,
names_from  = c(prob),
values_from = c(acc)
)
names(acc_abs_cond.wide) <- c("subid","pro100",'pro80','pro50')
print(paste0("acc_abs_overall: ",mean(acc_abs_overall$acc)))
print(paste0("acc_abs_100%: ",mean(acc_abs_cond.wide$pro100)))
print(paste0("acc_abs_80%: ",mean(acc_abs_cond.wide$pro80)))
print(paste0("acc_abs_50%: ",mean(acc_abs_cond.wide$pro50)))
#######################################sim data
acc_sim_overall <- sim_data %>%
group_by(subid) %>%
summarise(acc=mean(choice==choice_sim)) %>% ungroup()
acc_sim_cond <- sim_data %>%
group_by(subid,probab) %>%
summarise(mean(choice==choice_sim)) %>% ungroup()
names(acc_sim_cond) <- c("subid","prob",'acc')
acc_sim_cond.wide <- acc_sim_cond %>%
pivot_wider(
id_cols     = subid,
names_from  = c(prob),
values_from = c(acc)
)
names(acc_sim_cond.wide) <- c("subid","pro100",'pro80','pro50')
print(paste0("acc_sim_overall: ",mean(acc_sim_overall$acc)))
print(paste0("acc_sim_100%: ",mean(acc_sim_cond.wide$pro100)))
print(paste0("acc_sim_80%: ",mean(acc_sim_cond.wide$pro80)))
print(paste0("acc_sim_50%: ",mean(acc_sim_cond.wide$pro50)))
#########################################################3.2 PPC plotting across trials fro each cond,based on ACC###########################################
######abs data, using simulated choice
abs_rACC <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC),sds = sd(ACC),n=n()) %>% ungroup()
abs_rACC <- abs_rACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=1)
abs_sACC <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_sim),sds = sd(ACC_sim),n=n()) %>% ungroup()
abs_sACC <- abs_sACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
abs_ACC <- rbind.data.frame(abs_rACC,abs_sACC)
abs_ACC[abs_ACC$conf.high>1,'conf.high'] <- 1
abs_ACC$trial_perC2 <- as.numeric(abs_ACC$trial_perC2)
abs_ACC$group       <- factor(abs_ACC$group)
levels(abs_ACC$group) <- c("Real","Simulated")
FigA <- cplot(abs_ACC[abs_ACC$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(abs_ACC[abs_ACC$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(abs_ACC[abs_ACC$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_abs_ACC_sure_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_abs_ACC_pro_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_abs_ACC_rand_Audience.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("d","e","f"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_abs_ACC_all_Audience.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(abs_rACC$means,abs_sACC$means)
abs_rACC_1 <- abs_rACC[abs_rACC$probab==1,]
abs_sACC_1 <- abs_sACC[abs_sACC$probab==1,]
cor.test(abs_rACC_1$means,abs_sACC_1$means)
abs_rACC_2 <- abs_rACC[abs_rACC$probab==2,]
abs_sACC_2 <- abs_sACC[abs_sACC$probab==2,]
cor.test(abs_rACC_2$means,abs_sACC_2$means)
abs_rACC_3 <- abs_rACC[abs_rACC$probab==3,]
abs_sACC_3 <- abs_sACC[abs_sACC$probab==3,]
cor.test(abs_rACC_3$means,abs_sACC_3$means)
######abs data, using simulated choice prob
abs_sACC2 <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_prob_sim),sds = sd(ACC_prob_sim),n=n()) %>% ungroup()
abs_sACC2 <- abs_sACC2 %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
abs_ACC2 <- rbind.data.frame(abs_rACC,abs_sACC2)
abs_ACC2[abs_ACC2$conf.high>1,'conf.high'] <- 1
abs_ACC2$trial_perC2 <- as.numeric(abs_ACC2$trial_perC2)
abs_ACC2$group       <- factor(abs_ACC2$group)
levels(abs_ACC2$group) <- c("Real","Simulated")
FigA <- cplot(abs_ACC2[abs_ACC2$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(abs_ACC2[abs_ACC2$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(abs_ACC2[abs_ACC2$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_abs_ACCprob_sure_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_abs_ACCprob_pro_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_abs_ACCprob_rand_Audience.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("d","e","f"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_abs_ACCprob_all_Audience.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(abs_rACC$means,abs_sACC2$means)
abs_rACC_1 <- abs_rACC[abs_rACC$probab==1,]
abs_sACC2_1 <- abs_sACC2[abs_sACC2$probab==1,]
cor.test(abs_rACC_1$means,abs_sACC2_1$means)
abs_rACC_2 <- abs_rACC[abs_rACC$probab==2,]
abs_sACC2_2 <- abs_sACC2[abs_sACC2$probab==2,]
cor.test(abs_rACC_2$means,abs_sACC2_2$means)
abs_rACC_3 <- abs_rACC[abs_rACC$probab==3,]
abs_sACC2_3 <- abs_sACC2[abs_sACC2$probab==3,]
cor.test(abs_rACC_3$means,abs_sACC2_3$means)
######sim data, using simulated choice
sim_rACC <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC),sds = sd(ACC),n=n()) %>% ungroup()
sim_rACC <- sim_rACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=1)
sim_sACC <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_sim),sds = sd(ACC_sim),n=n()) %>% ungroup()
sim_sACC <- sim_sACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
sim_ACC <- rbind.data.frame(sim_rACC,sim_sACC)
sim_ACC[sim_ACC$conf.high>1,'conf.high'] <- 1
sim_ACC$trial_perC2 <- as.numeric(sim_ACC$trial_perC2)
sim_ACC$group       <- factor(sim_ACC$group)
levels(sim_ACC$group) <- c("Real","Simulated")
FigA <- cplot(sim_ACC[sim_ACC$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(sim_ACC[sim_ACC$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(sim_ACC[sim_ACC$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_sim_ACC_sure_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_sim_ACC_pro_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_sim_ACC_rand_Audience.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("d","e","f"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_sim_ACC_all_Audience.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(sim_rACC$means,sim_sACC$means)
sim_rACC_1 <- sim_rACC[sim_rACC$probab==1,]
sim_sACC_1 <- sim_sACC[sim_sACC$probab==1,]
cor.test(sim_rACC_1$means,sim_sACC_1$means)
sim_rACC_2 <- sim_rACC[sim_rACC$probab==2,]
sim_sACC_2 <- sim_sACC[sim_sACC$probab==2,]
cor.test(sim_rACC_2$means,sim_sACC_2$means)
sim_rACC_3 <- sim_rACC[sim_rACC$probab==3,]
sim_sACC_3 <- sim_sACC[sim_sACC$probab==3,]
cor.test(sim_rACC_3$means,sim_sACC_3$means)
######sim data, using simulated choice prob
sim_sACC2 <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_prob_sim),sds = sd(ACC_prob_sim),n=n()) %>% ungroup()
sim_sACC2 <- sim_sACC2 %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
sim_ACC2 <- rbind.data.frame(sim_rACC,sim_sACC2)
sim_ACC2[sim_ACC2$conf.high>1,'conf.high'] <- 1
sim_ACC2$trial_perC2 <- as.numeric(sim_ACC2$trial_perC2)
sim_ACC2$group       <- factor(sim_ACC2$group)
levels(sim_ACC2$group) <- c("Real","Simulated")
FigA <- cplot(sim_ACC2[sim_ACC2$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(sim_ACC2[sim_ACC2$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(sim_ACC2[sim_ACC2$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_sim_ACCprob_sure_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_sim_ACCprob_pro_Audience.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_sim_ACCprob_rand_Audience.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("d","e","f"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_sim_ACCprob_all_Audience.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(sim_rACC$means,sim_sACC2$means)
sim_rACC_1 <- sim_rACC[sim_rACC$probab==1,]
sim_sACC2_1 <- sim_sACC2[sim_sACC2$probab==1,]
cor.test(sim_rACC_1$means,sim_sACC2_1$means)
sim_rACC_2 <- sim_rACC[sim_rACC$probab==2,]
sim_sACC2_2 <- sim_sACC2[sim_sACC2$probab==2,]
cor.test(sim_rACC_2$means,sim_sACC2_2$means)
sim_rACC_3 <- sim_rACC[sim_rACC$probab==3,]
sim_sACC2_3 <- sim_sACC2[sim_sACC2$probab==3,]
cor.test(sim_rACC_3$means,sim_sACC2_3$means)
#1. load the saved data
abs_data  <- read.csv(file="./sim/alone/sim_data_m7c2_abs_fit_all.csv")
sim_data  <- read.csv(file="./sim/alone/sim_data_m7c2_sim_fit_all.csv")
#2. compute the simulated ACC and probabilities of ACC
abs_data <- abs_data %>%
mutate(ACC_sim = ifelse((choice==choice_sim & ACC==1) | (choice!=choice_sim & ACC==0), 1, 0),#compute the simulated ACC
ACC_prob_sim = ifelse(ACC==1,choice_prob_sim,1-choice_prob_sim)) #compute the simulated ACC prob
sim_data <- sim_data %>%
mutate(ACC_sim = ifelse((choice==choice_sim & ACC==1) | (choice!=choice_sim & ACC==0), 1, 0),#compute the simulated ACC
ACC_prob_sim = ifelse(ACC==1,choice_prob_sim,1-choice_prob_sim)) #compute the simulated ACC prob
##########################################3.1 accuracy of prediction overall and for each cond################################################
#######################################abs data
acc_abs_overall <- abs_data %>%
group_by(subid) %>%
summarise(acc=mean(choice==choice_sim)) %>% ungroup()
acc_abs_cond <- abs_data %>%
group_by(subid,probab) %>%
summarise(mean(choice==choice_sim)) %>% ungroup()
names(acc_abs_cond) <- c("subid","prob",'acc')
acc_abs_cond.wide <- acc_abs_cond %>%
pivot_wider(
id_cols     = subid,
names_from  = c(prob),
values_from = c(acc)
)
names(acc_abs_cond.wide) <- c("subid","pro100",'pro80','pro50')
print(paste0("acc_abs_overall: ",mean(acc_abs_overall$acc)))
print(paste0("acc_abs_100%: ",mean(acc_abs_cond.wide$pro100)))
print(paste0("acc_abs_80%: ",mean(acc_abs_cond.wide$pro80)))
print(paste0("acc_abs_50%: ",mean(acc_abs_cond.wide$pro50)))
#######################################sim data
acc_sim_overall <- sim_data %>%
group_by(subid) %>%
summarise(acc=mean(choice==choice_sim)) %>% ungroup()
acc_sim_cond <- sim_data %>%
group_by(subid,probab) %>%
summarise(mean(choice==choice_sim)) %>% ungroup()
names(acc_sim_cond) <- c("subid","prob",'acc')
acc_sim_cond.wide <- acc_sim_cond %>%
pivot_wider(
id_cols     = subid,
names_from  = c(prob),
values_from = c(acc)
)
names(acc_sim_cond.wide) <- c("subid","pro100",'pro80','pro50')
print(paste0("acc_sim_overall: ",mean(acc_sim_overall$acc)))
print(paste0("acc_sim_100%: ",mean(acc_sim_cond.wide$pro100)))
print(paste0("acc_sim_80%: ",mean(acc_sim_cond.wide$pro80)))
print(paste0("acc_sim_50%: ",mean(acc_sim_cond.wide$pro50)))
#do the correlation
cor.test(abs_rACC$means,abs_sACC$means)
abs_rACC_1 <- abs_rACC[abs_rACC$probab==1,]
abs_sACC_1 <- abs_sACC[abs_sACC$probab==1,]
cor.test(abs_rACC_1$means,abs_sACC_1$means)
abs_rACC_2 <- abs_rACC[abs_rACC$probab==2,]
abs_sACC_2 <- abs_sACC[abs_sACC$probab==2,]
cor.test(abs_rACC_2$means,abs_sACC_2$means)
abs_rACC_3 <- abs_rACC[abs_rACC$probab==3,]
abs_sACC_3 <- abs_sACC[abs_sACC$probab==3,]
cor.test(abs_rACC_3$means,abs_sACC_3$means)
#########################################################3.2 PPC plotting across trials fro each cond,based on ACC###########################################
######abs data, using simulated choice
abs_rACC <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC),sds = sd(ACC),n=n()) %>% ungroup()
abs_rACC <- abs_rACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=1)
abs_sACC <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_sim),sds = sd(ACC_sim),n=n()) %>% ungroup()
abs_sACC <- abs_sACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
abs_ACC <- rbind.data.frame(abs_rACC,abs_sACC)
abs_ACC[abs_ACC$conf.high>1,'conf.high'] <- 1
abs_ACC$trial_perC2 <- as.numeric(abs_ACC$trial_perC2)
abs_ACC$group       <- factor(abs_ACC$group)
levels(abs_ACC$group) <- c("Real","Simulated")
FigA <- cplot(abs_ACC[abs_ACC$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(abs_ACC[abs_ACC$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(abs_ACC[abs_ACC$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_abs_ACC_sure_alone.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_abs_ACC_pro_alone.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_abs_ACC_rand_alone.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("a","b","c"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_abs_ACC_all_alone.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(abs_rACC$means,abs_sACC$means)
abs_rACC_1 <- abs_rACC[abs_rACC$probab==1,]
abs_sACC_1 <- abs_sACC[abs_sACC$probab==1,]
cor.test(abs_rACC_1$means,abs_sACC_1$means)
abs_rACC_2 <- abs_rACC[abs_rACC$probab==2,]
abs_sACC_2 <- abs_sACC[abs_sACC$probab==2,]
cor.test(abs_rACC_2$means,abs_sACC_2$means)
abs_rACC_3 <- abs_rACC[abs_rACC$probab==3,]
abs_sACC_3 <- abs_sACC[abs_sACC$probab==3,]
cor.test(abs_rACC_3$means,abs_sACC_3$means)
######abs data, using simulated choice prob
abs_sACC2 <- abs_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_prob_sim),sds = sd(ACC_prob_sim),n=n()) %>% ungroup()
abs_sACC2 <- abs_sACC2 %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
abs_ACC2 <- rbind.data.frame(abs_rACC,abs_sACC2)
abs_ACC2[abs_ACC2$conf.high>1,'conf.high'] <- 1
abs_ACC2$trial_perC2 <- as.numeric(abs_ACC2$trial_perC2)
abs_ACC2$group       <- factor(abs_ACC2$group)
levels(abs_ACC2$group) <- c("Real","Simulated")
FigA <- cplot(abs_ACC2[abs_ACC2$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(abs_ACC2[abs_ACC2$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(abs_ACC2[abs_ACC2$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_abs_ACCprob_sure_alone.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_abs_ACCprob_pro_alone.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_abs_ACCprob_rand_alone.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("a","b","c"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_abs_ACCprob_all_alone.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(abs_rACC$means,abs_sACC2$means)
abs_rACC_1 <- abs_rACC[abs_rACC$probab==1,]
abs_sACC2_1 <- abs_sACC2[abs_sACC2$probab==1,]
cor.test(abs_rACC_1$means,abs_sACC2_1$means)
abs_rACC_2 <- abs_rACC[abs_rACC$probab==2,]
abs_sACC2_2 <- abs_sACC2[abs_sACC2$probab==2,]
cor.test(abs_rACC_2$means,abs_sACC2_2$means)
abs_rACC_3 <- abs_rACC[abs_rACC$probab==3,]
abs_sACC2_3 <- abs_sACC2[abs_sACC2$probab==3,]
cor.test(abs_rACC_3$means,abs_sACC2_3$means)
######sim data, using simulated choice
sim_rACC <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC),sds = sd(ACC),n=n()) %>% ungroup()
sim_rACC <- sim_rACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=1)
sim_sACC <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_sim),sds = sd(ACC_sim),n=n()) %>% ungroup()
sim_sACC <- sim_sACC %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
sim_ACC <- rbind.data.frame(sim_rACC,sim_sACC)
sim_ACC[sim_ACC$conf.high>1,'conf.high'] <- 1
sim_ACC$trial_perC2 <- as.numeric(sim_ACC$trial_perC2)
sim_ACC$group       <- factor(sim_ACC$group)
levels(sim_ACC$group) <- c("Real","Simulated")
FigA <- cplot(sim_ACC[sim_ACC$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(sim_ACC[sim_ACC$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(sim_ACC[sim_ACC$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_sim_ACC_sure_alone.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_sim_ACC_pro_alone.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_sim_ACC_rand_alone.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("a","b","c"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_sim_ACC_all_alone.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(sim_rACC$means,sim_sACC$means)
sim_rACC_1 <- sim_rACC[sim_rACC$probab==1,]
sim_sACC_1 <- sim_sACC[sim_sACC$probab==1,]
cor.test(sim_rACC_1$means,sim_sACC_1$means)
sim_rACC_2 <- sim_rACC[sim_rACC$probab==2,]
sim_sACC_2 <- sim_sACC[sim_sACC$probab==2,]
cor.test(sim_rACC_2$means,sim_sACC_2$means)
sim_rACC_3 <- sim_rACC[sim_rACC$probab==3,]
sim_sACC_3 <- sim_sACC[sim_sACC$probab==3,]
cor.test(sim_rACC_3$means,sim_sACC_3$means)
######sim data, using simulated choice prob
sim_sACC2 <- sim_data %>%
group_by(probab,trial_perC2) %>%
summarise(means = mean(ACC_prob_sim),sds = sd(ACC_prob_sim),n=n()) %>% ungroup()
sim_sACC2 <- sim_sACC2 %>%
mutate(conf.high = means + qnorm(0.975)*sds/sqrt(n), conf.low = means - qnorm(0.975)*sds/sqrt(n),group=2)
sim_ACC2 <- rbind.data.frame(sim_rACC,sim_sACC2)
sim_ACC2[sim_ACC2$conf.high>1,'conf.high'] <- 1
sim_ACC2$trial_perC2 <- as.numeric(sim_ACC2$trial_perC2)
sim_ACC2$group       <- factor(sim_ACC2$group)
levels(sim_ACC2$group) <- c("Real","Simulated")
FigA <- cplot(sim_ACC2[sim_ACC2$probab==1,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (high validity)")
FigB <- cplot(sim_ACC2[sim_ACC2$probab==2,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (medium validity)")
FigC <- cplot(sim_ACC2[sim_ACC2$probab==3,],c(0,25),seq(from=0,to=25,by=5),c(0.2,1.0),seq(from=0.2,to=1.0,by=0.2),"Trial number","Accuracy (low validity)")
ggexport(FigA,filename = "Figure_sim_ACCprob_sure_alone.png",width=2400,height=1600,res = 300)
ggexport(FigB,filename = "Figure_sim_ACCprob_pro_alone.png",width=2400,height=1600,res = 300)
ggexport(FigC,filename = "Figure_sim_ACCprob_rand_alone.png",width=2400,height=1600,res = 300)
Fig <- ggarrange(FigA,FigB,FigC,ncol=3,nrow=1,widths=c(1,1),labels = c("a","b","c"),legend='none',font.label = list(size = 20, color = "black"))
ggexport(Fig,filename = "Figure_sim_ACCprob_all_alone.png",width=6000,height=1600,res = 300)
Fig
#do the correlation
cor.test(sim_rACC$means,sim_sACC2$means)
sim_rACC_1 <- sim_rACC[sim_rACC$probab==1,]
sim_sACC2_1 <- sim_sACC2[sim_sACC2$probab==1,]
cor.test(sim_rACC_1$means,sim_sACC2_1$means)
sim_rACC_2 <- sim_rACC[sim_rACC$probab==2,]
sim_sACC2_2 <- sim_sACC2[sim_sACC2$probab==2,]
cor.test(sim_rACC_2$means,sim_sACC2_2$means)
sim_rACC_3 <- sim_rACC[sim_rACC$probab==3,]
sim_sACC2_3 <- sim_sACC2[sim_sACC2$probab==3,]
cor.test(sim_rACC_3$means,sim_sACC2_3$means)
